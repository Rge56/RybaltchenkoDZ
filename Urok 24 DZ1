#include <iostream>

using namespace std;

class Time{
    size_t hours;
    size_t minutes;
    friend istream& operator >> (istream& i, Time & A);
    friend ostream& operator << (ostream& o, const Time & A);
public:
    Time ():hours(0),minutes(0){};
    Time (size_t i, size_t y):hours(i),minutes(y){};
    Time& operator+(const size_t& i);
    Time& operator+(const Time& i);
    Time& operator-(const Time& i);
    bool operator==(const Time& i);
    Time& Funk_PM();

 };

istream& operator >> (istream& i, Time & A){
    cout<<"Enter Hours:     ";
    i>>A.hours; A.hours%=24;
    cout<<"Enter minutes:   ";
    i>>A.minutes;A.minutes%=60;
    return i;
}

ostream& operator << (ostream& o, const Time & A){
    o<<"Current Time  -  "<<A.hours<<":";
    o<<A.minutes;
    return o;
}

Time& Time:: operator+(const size_t& i){
    Time temp;
    temp.minutes=minutes+i;
    temp.hours=(hours+temp.minutes/60)%24;
    temp.minutes%=60;
    return temp;
}

Time& Time:: operator+(const Time& i){
    Time temp;
    temp.minutes=minutes+i.minutes;
    temp.hours=((hours+i.hours)+temp.minutes/60)%24;
    temp.minutes%=60;
    return temp;
}

Time& Time::operator-(const Time& i){
    Time temp;
    int tmp = hours*60+minutes-(i.hours*60+i.minutes);
     if(tmp>=0)
        {
        temp.hours=tmp/60;
        temp.minutes=tmp%60;
        }
    else temp.hours=temp.minutes=0;
    return temp;
    }

bool Time::operator==(const Time& i){
    if((hours==i.hours)&&(minutes==i.minutes))
        return true;
    else return false;
}
 Time& Time:: Funk_PM(){
  hours%=12;
 return *this;
 }

int main()
{
    Time A;
    Time B;
    Time C;

    cin>>A;
    cout<<A<<"\n";
    B=A+5;
    cout<<B<<"\n";
    C=A+B;
    cout<<C<<"\n";
    B=C-A;
    cout<<B<<"\n";

    cout<<"Time 1:\n";cin>>A;
    cout<<"Time 2:\n";cin>>B;

    if(A==B) cout<<"Time A == Time B\n";
    else     cout<<"Time A != Time B\n";

    cout<<A.Funk_PM()<<"(pm)";
    return 0;
}
